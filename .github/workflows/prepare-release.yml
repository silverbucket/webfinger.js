name: Prepare Release
run-name: Prepare ${{ github.event.inputs.release_type }} release build #${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Run linting
        run: bun run lint

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version_bump
        run: |
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build project with new version
        run: |
          bun run build:release
          # Update demo page with new version
          echo ${{ steps.version_bump.outputs.new_version }}
          sed -i 's/{{VERSION}}/v${{ steps.version_bump.outputs.new_version }}/g' demo/index.html || true
          sed -i 's/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ steps.version_bump.outputs.new_version }}/g' demo/index.html || true
          grep "v${{ steps.version_bump.outputs.new_version }}" demo/index.html

      - name: Setup Node.js for ES module import test
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Test Node.js ES module imports
        run: bun run test:imports:node

      - name: Test Bun ES module imports
        run: bun run test:imports:bun

      - name: Generate API documentation
        run: bun run docs:generate

      - name: Generate release notes
        run: |
          # Generate release notes
          CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          NEW_VERSION=${{ steps.version_bump.outputs.new_version }}
          CHANGELOG=$(git log --pretty=format:"- %s" v$CURRENT_VERSION..HEAD | grep -v "^- chore: bump version" || echo "- Bug fixes and improvements")
          
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
              # Create new file if it doesn't exist (shouldn't happen now that we have the base file)
              cat > CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          ## v$NEW_VERSION - ($(date '+%Y-%m-%d'))
          
          $CHANGELOG
          
          EOF
          else
              # Insert new version after the header
              cat > new_entry.tmp << EOF
          ## v$NEW_VERSION - ($(date '+%Y-%m-%d'))
          
          $CHANGELOG
          
          EOF
              # Insert after line that contains "Semantic Versioning" 
              awk '/Semantic Versioning/ {print; print ""; getline < "new_entry.tmp"; while ((getline line < "new_entry.tmp") > 0) print line; print ""; next} 1' CHANGELOG.md > CHANGELOG.md.tmp
              mv CHANGELOG.md.tmp CHANGELOG.md
              rm new_entry.tmp
          fi

      - name: Create release branch
        run: |
          # Create release branch
          NEW_VERSION=${{ steps.version_bump.outputs.new_version }}
          RELEASE_BRANCH="release/v$NEW_VERSION"
          git checkout -b "$RELEASE_BRANCH"
          git add package.json dist/ demo/ docs/ CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin "$RELEASE_BRANCH"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      - name: Double check documentation links
        run: bun run lint

      # Note: GitHub release and git tagging will happen automatically when PR is merged

      - name: Deploy to GitHub Pages
        run: ./scripts/deploy-to-ghpages.sh ${{ steps.version_bump.outputs.new_version }} ${{ env.RELEASE_BRANCH }}

      - name: Verify demo deployment
        run: ./scripts/verify-demo.sh ${{ steps.version_bump.outputs.new_version }}

      - name: Test WebFinger functionality
        run: bun scripts/test-webfinger-functionality.js

      - name: Post-release summary
        run: |
          echo "## 🎉 Release Prepared" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.current_version.outputs.version }} → ${{ steps.version_bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: https://github.com/silverbucket/webfinger.js/releases/tag/v${{ steps.version_bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Demo**: https://silverbucket.github.io/webfinger.js/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Test the demo" >> $GITHUB_STEP_SUMMARY
          echo "- Review and merge the release PR" >> $GITHUB_STEP_SUMMARY
          echo "- NPM publishing will happen automatically on merge" >> $GITHUB_STEP_SUMMARY

      # Note: NPM publishing and git tagging will happen automatically when PR is merged

      - name: Create release PR
        run: |
          # Create PR for release
          gh pr create \
            --title "Release v${{ steps.version_bump.outputs.new_version }}" \
            --body "🚀 **Automated Prepare Release v${{ steps.version_bump.outputs.new_version }}**

          This PR contains the version bump for release v${{ steps.version_bump.outputs.new_version }}.

          ## ✅ Release Steps Completed
          - Tests & linting passed
          - Project built successfully  
          - API documentation generated
          - Demo page updated and tested
          - Release notes generated in `CHANGELOG.md`

          ## ✏️ **Edit Release Notes**
          You can edit the release notes for this version in the `CHANGELOG.md` file in this PR to curate the changelog before merging.

          ## 📋 Pending Steps (on PR merge)
          - 🏷️ **Git tag creation** - will happen automatically via GitHub Actions
          - 📋 **GitHub release creation** - will use edited notes from `CHANGELOG.md`
          - 📦 **NPM publishing** - will happen automatically via GitHub Actions

          ## 🔗 Release Links
          - **Demo**: https://silverbucket.github.io/webfinger.js/
          - **GitHub Release**: (will be created after merge)
          - **NPM**: https://www.npmjs.com/package/webfinger.js (will update after merge)

          ---
          🚀 Generated with automated release workflow" \
            --base "${{ github.ref_name }}" \
            --head "${{ env.RELEASE_BRANCH }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Release failed - cleaning up..."
          
          # Delete release branch if it exists
          git push origin --delete "${{ env.RELEASE_BRANCH }}" || true
          
          # Note: No git tags to clean up - tagging happens on merge
          
          echo "❌ Release failed and has been cleaned up. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
